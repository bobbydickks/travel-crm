#!/usr/bin/env python3
"""
Comprehensive End-to-End Test Suite for Travel CRM
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import subprocess
import time
import requests
import os
import sys
from pathlib import Path
import json
import sqlite3

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

class TravelCRMTester:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8003"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8003 –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.server_process = None
        self.test_results = []
        
    def log_test(self, test_name, success, message=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        status = f"{Colors.GREEN}‚úì PASS{Colors.END}" if success else f"{Colors.RED}‚úó FAIL{Colors.END}"
        print(f"  {status} {test_name}")
        if message:
            print(f"    {Colors.CYAN}{message}{Colors.END}")
        self.test_results.append({
            'test': test_name,
            'success': success,
            'message': message
        })
    
    def start_server(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"{Colors.BLUE}{Colors.BOLD}üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...{Colors.END}")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            os.chdir(Path(__file__).parent)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            self.server_process = subprocess.Popen([
                sys.executable, "-m", "uvicorn", "src.main:app",
                "--host", "127.0.0.1",
                "--port", "8003",
                "--log-level", "error"
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            for i in range(30):
                try:
                    response = requests.get(f"{self.base_url}/health", timeout=1)
                    if response.status_code == 200:
                        print(f"{Colors.GREEN}‚úì –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.base_url}{Colors.END}")
                        return True
                except:
                    time.sleep(1)
            
            print(f"{Colors.RED}‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä{Colors.END}")
            return False
            
        except Exception as e:
            print(f"{Colors.RED}‚úó –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}{Colors.END}")
            return False
    
    def stop_server(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.server_process:
            print(f"{Colors.YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...{Colors.END}")
            self.server_process.terminate()
            try:
                self.server_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                self.server_process.kill()
    
    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        print(f"\n{Colors.BOLD}üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö{Colors.END}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ë–î
            db_path = Path("travel_crm.db")
            if not db_path.exists():
                self.log_test("Database file exists", False, "travel_crm.db –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            self.log_test("Database file exists", True, f"–†–∞–∑–º–µ—Ä: {db_path.stat().st_size} –±–∞–π—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
            conn = sqlite3.connect("travel_crm.db")
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
            if cursor.fetchone():
                self.log_test("Users table exists", True)
                
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("SELECT COUNT(*) FROM users")
                user_count = cursor.fetchone()[0]
                self.log_test("Users count", True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {user_count}")
            else:
                self.log_test("Users table exists", False)
            
            conn.close()
            
        except Exception as e:
            self.log_test("Database connection", False, str(e))
    
    def test_api_endpoints(self):
        """–¢–µ—Å—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
        print(f"\n{Colors.BOLD}üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤{Colors.END}")
        
        # –¢–µ—Å—Ç health check
        try:
            response = requests.get(f"{self.base_url}/health")
            self.log_test("GET /health", response.status_code == 200, 
                         f"Status: {response.status_code}, Response: {response.json()}")
        except Exception as e:
            self.log_test("GET /health", False, str(e))
        
        # –¢–µ—Å—Ç robots.txt
        try:
            response = requests.get(f"{self.base_url}/robots.txt")
            self.log_test("GET /robots.txt", response.status_code == 200,
                         f"Content-Type: {response.headers.get('content-type')}")
        except Exception as e:
            self.log_test("GET /robots.txt", False, str(e))
        
        # –¢–µ—Å—Ç favicon
        try:
            response = requests.get(f"{self.base_url}/favicon.ico")
            self.log_test("GET /favicon.ico", response.status_code == 200,
                         f"Content-Type: {response.headers.get('content-type')}")
        except Exception as e:
            self.log_test("GET /favicon.ico", False, str(e))
        
        # –¢–µ—Å—Ç OpenAPI docs
        try:
            response = requests.get(f"{self.base_url}/docs")
            self.log_test("GET /docs", response.status_code == 200,
                         "Swagger UI –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.log_test("GET /docs", False, str(e))
    
    def test_web_interface(self):
        """–¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        print(f"\n{Colors.BOLD}üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞{Colors.END}")
        
        session = requests.Session()
        
        # –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ /login)
        try:
            response = session.get(f"{self.base_url}/", allow_redirects=False)
            self.log_test("GET / (redirect to login)", response.status_code == 302,
                         f"Location: {response.headers.get('location')}")
        except Exception as e:
            self.log_test("GET / (redirect)", False, str(e))
        
        # –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
        try:
            response = session.get(f"{self.base_url}/login")
            success = response.status_code == 200 and ("–í–æ–π—Ç–∏" in response.text or "Travel CRM" in response.text)
            self.log_test("GET /login", success,
                         f"Status: {response.status_code}, Contains login form: {success}")
        except Exception as e:
            self.log_test("GET /login", False, str(e))
        
        # –¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            response = session.get(f"{self.base_url}/register")
            success = response.status_code == 200 and ("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" in response.text or "Travel CRM" in response.text)
            self.log_test("GET /register", success,
                         f"Status: {response.status_code}, Contains register form: {success}")
        except Exception as e:
            self.log_test("GET /register", False, str(e))
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ dashboard –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        try:
            response = session.get(f"{self.base_url}/dashboard", allow_redirects=False)
            self.log_test("GET /dashboard (unauthorized)", response.status_code == 302,
                         "–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            self.log_test("GET /dashboard (unauthorized)", False, str(e))
    
    def test_authentication_flow(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print(f"\n{Colors.BOLD}üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏{Colors.END}")
        
        session = requests.Session()
        
        # –¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ API (OAuth2PasswordRequestForm)
        try:
            response = session.post(f"{self.base_url}/auth/login", 
                                  data={"username": "wrong_user", "password": "wrong_pass"},
                                  headers={"Content-Type": "application/x-www-form-urlencoded"})
            self.log_test("Login with wrong credentials (API)", response.status_code == 401,
                         f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Login with wrong credentials (API)", False, str(e))
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ API (–∏—Å–ø–æ–ª—å–∑—É–µ–º email –≤–º–µ—Å—Ç–æ username)
        try:
            response = session.post(f"{self.base_url}/auth/login", 
                                  data={"username": "admin@travelcrm.com", "password": "admin123"},
                                  headers={"Content-Type": "application/x-www-form-urlencoded"})
            if response.status_code == 200:
                token_data = response.json()
                self.log_test("Admin login (API)", True,
                             f"Token type: {token_data.get('token_type')}")
            else:
                self.log_test("Admin login (API)", False,
                             f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Admin login (API)", False, str(e))
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º email –ø–æ–ª–µ)
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            response = session.get(f"{self.base_url}/login")
            if response.status_code == 200:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞ —Å email –ø–æ–ª–µ–º
                login_response = session.post(f"{self.base_url}/login", 
                                            data={"email": "admin@travelcrm.com", "password": "admin123"},
                                            allow_redirects=False)
                
                if login_response.status_code == 302:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ dashboard –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞
                    dashboard_response = session.get(f"{self.base_url}/dashboard")
                    success = dashboard_response.status_code == 200 and ("Dashboard" in dashboard_response.text or "–î–∞—à–±–æ—Ä–¥" in dashboard_response.text)
                    self.log_test("Web login flow", success,
                                 f"Dashboard accessible: {success}")
                else:
                    self.log_test("Web login flow", False,
                                 f"Login failed: {login_response.status_code}")
            else:
                self.log_test("Web login flow", False, "Cannot access login page")
        except Exception as e:
            self.log_test("Web login flow", False, str(e))
    
    def test_static_files(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        print(f"\n{Colors.BOLD}üìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤{Colors.END}")
        
        # –¢–µ—Å—Ç CSS
        try:
            response = requests.get(f"{self.base_url}/static/style.css")
            success = response.status_code == 200 and "text/css" in response.headers.get('content-type', '')
            self.log_test("Static CSS file", success,
                         f"Status: {response.status_code}, Size: {len(response.content)} bytes")
        except Exception as e:
            self.log_test("Static CSS file", False, str(e))
        
        # –¢–µ—Å—Ç favicon –∏–∑ static
        try:
            response = requests.get(f"{self.base_url}/static/favicon.ico")
            self.log_test("Static favicon", response.status_code == 200,
                         f"Status: {response.status_code}")
        except Exception as e:
            self.log_test("Static favicon", False, str(e))
    
    def test_alembic_migrations(self):
        """–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–π Alembic"""
        print(f"\n{Colors.BOLD}üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic{Colors.END}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–µ–≤–∏–∑–∏—é
            result = subprocess.run([sys.executable, "-m", "alembic", "current"], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                output = result.stdout.strip()
                self.log_test("Alembic current revision", True, 
                             f"Current: {output}")
            else:
                self.log_test("Alembic current revision", False, 
                             f"Error: {result.stderr}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π
            result = subprocess.run([sys.executable, "-m", "alembic", "history"], 
                                  capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0:
                migrations_count = len([line for line in result.stdout.split('\n') if line.strip()])
                self.log_test("Alembic migrations history", True,
                             f"Migrations found: {migrations_count}")
            else:
                self.log_test("Alembic migrations history", False,
                             f"Error: {result.stderr}")
                
        except Exception as e:
            self.log_test("Alembic migrations", False, str(e))
    
    def test_project_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
        print(f"\n{Colors.BOLD}üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞{Colors.END}")
        
        required_files = [
            "src/main.py",
            "src/database.py", 
            "src/auth.py",
            "src/models/user.py",
            "src/routers/auth.py",
            "src/routers/web.py",
            "templates/base.html",
            "templates/login.html",
            "templates/register.html", 
            "templates/dashboard.html",
            "static/style.css",
            "requirements.txt",
            "pyproject.toml",
            "alembic.ini"
        ]
        
        for file_path in required_files:
            exists = Path(file_path).exists()
            self.log_test(f"File exists: {file_path}", exists)
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print(f"{Colors.BOLD}{Colors.BLUE}")
        print("=" * 60)
        print("üöÄ COMPREHENSIVE TRAVEL CRM E2E TEST SUITE")
        print("=" * 60)
        print(f"{Colors.END}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        if not self.start_server():
            print(f"{Colors.RED}–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä. –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã.{Colors.END}")
            return
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            self.test_project_structure()
            self.test_database_connection()
            self.test_alembic_migrations()
            self.test_api_endpoints()
            self.test_static_files()
            self.test_web_interface()
            self.test_authentication_flow()
            
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
            self.stop_server()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_summary()
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print(f"\n{Colors.BOLD}{Colors.BLUE}")
        print("=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        print(f"{Colors.END}")
        
        passed = sum(1 for result in self.test_results if result['success'])
        failed = len(self.test_results) - passed
        
        print(f"{Colors.GREEN}‚úì –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: {passed}{Colors.END}")
        print(f"{Colors.RED}‚úó –¢–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}{Colors.END}")
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(self.test_results)}")
        
        if failed > 0:
            print(f"\n{Colors.RED}{Colors.BOLD}–ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã:{Colors.END}")
            for result in self.test_results:
                if not result['success']:
                    print(f"  {Colors.RED}‚úó {result['test']}{Colors.END}")
                    if result['message']:
                        print(f"    {Colors.YELLOW}{result['message']}{Colors.END}")
        
        success_rate = (passed / len(self.test_results)) * 100 if self.test_results else 0
        
        print(f"\n{Colors.BOLD}–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%{Colors.END}")
        
        if success_rate >= 90:
            print(f"{Colors.GREEN}{Colors.BOLD}üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ{Colors.END}")
        elif success_rate >= 70:
            print(f"{Colors.YELLOW}{Colors.BOLD}‚ö†Ô∏è –•–û–†–û–®–û, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è{Colors.END}")
        else:
            print(f"{Colors.RED}{Colors.BOLD}‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï! –ú–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º{Colors.END}")

if __name__ == "__main__":
    tester = TravelCRMTester()
    try:
        tester.run_all_tests()
    except KeyboardInterrupt:
        print(f"\n{Colors.YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Colors.END}")
        tester.stop_server()
    except Exception as e:
        print(f"\n{Colors.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}{Colors.END}")
        tester.stop_server()
