#!/usr/bin/env python3
import requests
import json
import sys

BASE_URL = "http://127.0.0.1:8002"

def test_api():
    print("üß™ End-to-End —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Travel CRM API")
    print("=" * 50)
    
    try:
        # 1. Health check
        print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ health-check...")
        response = requests.get(f"{BASE_URL}/health")
        assert response.status_code == 200
        health_data = response.json()
        print(f"‚úÖ Health check: {health_data['status']}")
        
        # 2. Root endpoint
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ root endpoint...")
        response = requests.get(f"{BASE_URL}/")
        assert response.status_code == 200
        root_data = response.json()
        print(f"‚úÖ Root: {root_data['message']}")
        
        # 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("\n3Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        register_data = {
            "email": "test@example.com",
            "password": "testpassword123"
        }
        response = requests.post(f"{BASE_URL}/auth/register", json=register_data)
        assert response.status_code == 201
        user_data = response.json()
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user_data['email']}, —Ä–æ–ª—å: {user_data['role']}")
        
        # 4. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        print("\n4Ô∏è‚É£ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        login_data = {
            "username": "test@example.com",
            "password": "testpassword123"
        }
        response = requests.post(f"{BASE_URL}/auth/login", data=login_data)
        assert response.status_code == 200
        token_data = response.json()
        access_token = token_data["access_token"]
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        headers = {"Authorization": f"Bearer {access_token}"}
        response = requests.get(f"{BASE_URL}/auth/me", headers=headers)
        assert response.status_code == 200
        profile_data = response.json()
        print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å: {profile_data['email']}, —Ä–æ–ª—å: {profile_data['role']}")
        
        # 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        print("\n6Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ refresh —Ç–æ–∫–µ–Ω–∞...")
        refresh_data = {"refresh_token": token_data["refresh_token"]}
        response = requests.post(f"{BASE_URL}/auth/refresh", json=refresh_data)
        assert response.status_code == 200
        new_token_data = response.json()
        print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # 7. –¢–µ—Å—Ç —Å –∞–¥–º–∏–Ω—Å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        print("\n7Ô∏è‚É£ –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞...")
        admin_login_data = {
            "username": "admin@travelcrm.com",
            "password": "admin123"
        }
        response = requests.post(f"{BASE_URL}/auth/login", data=admin_login_data)
        assert response.status_code == 200
        admin_token_data = response.json()
        print("‚úÖ –ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        
        admin_headers = {"Authorization": f"Bearer {admin_token_data['access_token']}"}
        response = requests.get(f"{BASE_URL}/auth/me", headers=admin_headers)
        assert response.status_code == 200
        admin_profile = response.json()
        print(f"‚úÖ –ê–¥–º–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å: {admin_profile['email']}, —Ä–æ–ª—å: {admin_profile['role']}")
        
        print("\n" + "=" * 50)
        print("üéâ –í—Å–µ End-to-End —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –≠—Ç–∞–ø 1 –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        return True
        
    except requests.exceptions.ConnectionError:
        print(f"‚ùå –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ {BASE_URL}")
        return False
    except AssertionError as e:
        print(f"‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = test_api()
    sys.exit(0 if success else 1)
