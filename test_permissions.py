#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ Travel CRM
"""
import requests
import time
import json
from typing import Dict, Any

class PermissionsTest:
    def __init__(self):
        self.base_url = "http://127.0.0.1:8000"
        self.admin_token = None
        self.supervisor_token = None
        self.operator_token = None
        
    def login_and_get_token(self, email: str, password: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = requests.post(
                f"{self.base_url}/auth/login",
                data={"username": email, "password": password},
                headers={"Content-Type": "application/x-www-form-urlencoded"}
            )
            if response.status_code == 200:
                token_data = response.json()
                return token_data["access_token"]
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è {email}: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None
    
    def test_api_with_token(self, endpoint: str, method: str = "GET", token: str = None, data: Dict[Any, Any] = None):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint —Å —Ç–æ–∫–µ–Ω–æ–º"""
        headers = {}
        if token:
            headers["Authorization"] = f"Bearer {token}"
        
        try:
            if method == "GET":
                response = requests.get(f"{self.base_url}{endpoint}", headers=headers)
            elif method == "POST":
                response = requests.post(f"{self.base_url}{endpoint}", headers=headers, json=data)
            
            return {
                "status_code": response.status_code,
                "success": response.status_code < 400,
                "response": response.text[:200] if len(response.text) > 200 else response.text
            }
        except Exception as e:
            return {
                "status_code": None,
                "success": False,
                "response": str(e)
            }
    
    def run_tests(self):
        print("üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ü–†–ê–í –î–û–°–¢–£–ü–ê")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        self.admin_token = self.login_and_get_token("admin@travelcrm.com", "admin123")
        
        if not self.admin_token:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤.")
            return
        
        print(f"‚úÖ –¢–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω: {self.admin_token[:20]}...")
        
        print("\nüìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS:")
        print("-" * 40)
        
        # –¢–µ—Å—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        tests = [
            ("/auth/me", "GET", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
            ("/health", "GET", "Health check"),
            ("/docs", "GET", "API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"),
        ]
        
        for endpoint, method, description in tests:
            result = self.test_api_with_token(endpoint, method, self.admin_token)
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {method} {endpoint} - {description}")
            print(f"   Status: {result['status_code']}")
            if not result["success"]:
                print(f"   Error: {result['response']}")
        
        print("\nüîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ê–í –î–û–°–¢–£–ü–ê:")
        print("-" * 40)
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        new_user_data = {
            "email": "test.supervisor@example.com",
            "password": "testpass123",
            "role": "SUPERVISOR"
        }
        
        create_result = self.test_api_with_token(
            "/auth/register", 
            "POST", 
            self.admin_token, 
            new_user_data
        )
        
        if create_result["success"]:
            print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é SUPERVISOR")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {create_result['status_code']}")
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        no_token_result = self.test_api_with_token("/auth/me", "GET", None)
        if no_token_result["status_code"] == 401:
            print("‚úÖ –î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–µ—â—ë–Ω (401)")
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞: {no_token_result['status_code']}")
        
        print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê:")
        print("-" * 40)
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        try:
            # –ë–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            response = requests.get(f"{self.base_url}/register")
            if response.status_code == 302:
                print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        
        print("\nüìà –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        print("‚úÖ API —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞—â–∏—â—ë–Ω –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("‚úÖ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ")

if __name__ == "__main__":
    tester = PermissionsTest()
    
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(2)
    
    tester.run_tests()
